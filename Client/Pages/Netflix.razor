@page "/netflix"
@using Microsoft.AspNetCore.SignalR.Client
@using Eris.Shared.Models.Request
@using Eris.Shared.Models.Response
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Netflix</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-height-full py-4">
    @if (Status is null)
    {
        <p>
            <em>Waiting for connection...</em>
        </p>
    }
    else
    {
        <MudStack>
            <MudCard Elevation="0">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">You're watching:</MudText>
                </MudCardHeader>
                <div class="px-4 d-flex align-center">
                    <MudText Typo="Typo.h5">@Status.Metadata.Title</MudText>
                    <MudSpacer/>
                    <MudChip Variant="Variant.Text" Color="Color.Info" Style="text-transform: capitalize">@Status.Metadata.Type</MudChip>
                </div>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="4" md="3">
                            <img src="@Status.Metadata.Boxart[0].Url" alt="" style="width: 100%"/>
                        </MudItem>
                        <MudItem xs="8" md="9">
                            <MudText>@Status.Metadata.Synopsis</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudAlert Severity="@(Status.IsPlaying ? Severity.Success : Severity.Error)"
                                      Icon="@(Status.IsPlaying ? Icons.Material.Rounded.PlayCircle : Icons.Material.Rounded.PauseCircle)">
                                @(Status.IsPlaying ? "Playing" : "Paused")
                            </MudAlert>
                        </MudItem>
                        <MudItem xs="6">
                            <MudAlert Severity="@(Severity.Normal)" Icon="@(Icons.Material.Rounded.VolumeUp)">
                                Volume: @(Status.Volume)
                            </MudAlert>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudToolBar>
                                <MudIconButton Icon="@Icons.Material.Rounded.RestartAlt" OnClick="Restart"/>
                                <MudIconButton Icon="@Icons.Material.Rounded.Replay30" OnClick="Back"/>
                                <MudIconButton Icon="@Icons.Material.Rounded.PlayArrow" OnClick="Play" Disabled="@(Status.IsPlaying)"/>
                                <MudIconButton Icon="@Icons.Material.Rounded.Pause" OnClick="Pause" Disabled="@(!Status.IsPlaying)"/>
                                <MudIconButton Icon="@Icons.Material.Rounded.Forward30" OnClick="Forward"/>
                                <MudIconButton Icon="@Icons.Material.Rounded.VolumeOff" OnClick="Mute"
                                               Disabled="@(Status.Volume == 0)"/>
                            </MudToolBar>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="d-flex">
                                <MudText>@FormatTimestamp(Status.Elapsed)</MudText>
                                <MudSpacer/>
                                <MudText>@FormatTimestamp(Status.Duration)</MudText>
                            </div>
                            <MudProgressLinear Color="Color.Primary" Min="0" Max="@Status.Duration" Value="@Status.Elapsed" Class="my-7"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudCard>
                <MudCardHeader>Seek</MudCardHeader>
                <MudCardContent>
                    <div class="d-flex">
                        <MudText>@FormatTimestamp(Status.Elapsed)</MudText>
                        <MudSpacer/>
                        <MudText>@FormatTimestamp(Status.Duration)</MudText>
                    </div>
                    <MudSlider T="int" Min="0" Max="@Status.Duration" Variant="Variant.Filled" ValueChanged="RequestSeek"/>
                </MudCardContent>
            </MudCard>

            <MudCard>
                <MudCardHeader>Volume</MudCardHeader>
                <MudCardContent>
                    <div class="d-flex">
                        <MudText>0</MudText>
                        <MudSpacer/>
                        <MudText>100</MudText>
                    </div>
                    <MudSlider T="int" Min="0" Max="100" ValueLabel="true" Variant="Variant.Filled"
                               ValueChanged="RequestVolume"/>
                </MudCardContent>
            </MudCard>
        </MudStack>
    }
</MudContainer>

@code {

    // private int Position { get; set; }
    // private int Volume { get; set; }
    private PlaybackStatus? Status { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/netflix"))
            .Build();

        connection.On<PlaybackStatus>("Status", status =>
        {
            Status = status;
    // Volume = Status.Volume;
    // Position = Status.Elapsed;

            StateHasChanged();
        });

        await connection.StartAsync();
    }

    private async Task Back()
    {
        _ = await Http.PostAsync("api/netflix/back", content: null);
    }

    private async Task Forward()
    {
        _ = await Http.PostAsync("api/netflix/forward", content: null);
    }

    private async Task Pause()
    {
        _ = await Http.PostAsync("api/netflix/pause", content: null);
    }

    private async Task Play()
    {
        _ = await Http.PostAsync("api/netflix/play", content: null);
    }

    private async Task Mute() => await RequestVolume(vol: 0);

    private async Task Restart() => await RequestSeek(pos: 0);

    private async Task RequestSeek(int pos)
    {
        var request = new SeekRequest(Position: pos);
        _ = await Http.PutAsJsonAsync("api/netflix/seek", value: request);
    }

    private async Task RequestVolume(int vol)
    {
        var request = new VolumeRequest(Volume: vol);
        _ = await Http.PutAsJsonAsync("api/netflix/volume", value: request);
    }

    private string FormatTimestamp(int milliseconds)
    {
        var span = TimeSpan.FromMilliseconds(milliseconds);

        return span.TotalHours >= 1
            ? $"{span.Hours:D2}:{span.Minutes:D2}:{span.Seconds:D2}"
            : $"{span.Minutes:D2}:{span.Seconds:D2}";
    }

}